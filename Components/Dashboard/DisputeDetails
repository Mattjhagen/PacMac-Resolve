import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  User, 
  Mail, 
  Phone, 
  Calendar, 
  DollarSign,
  FileText,
  Send,
  Clock
} from "lucide-react";
import { format } from "date-fns";
import { motion } from "framer-motion";

const statusOptions = [
  "submitted",
  "under_review", 
  "investigating",
  "waiting_customer",
  "resolved",
  "closed"
];

export default function DisputeDetails({ dispute, onUpdateStatus }) {
  const [updateMessage, setUpdateMessage] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("");

  if (!dispute) {
    return (
      <Card className="shadow-lg border-slate-200/60 bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-xl font-bold text-slate-900">
            Dispute Details
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center py-12">
          <FileText className="w-12 h-12 text-slate-300 mx-auto mb-4" />
          <p className="text-slate-500">Select a dispute to view details</p>
        </CardContent>
      </Card>
    );
  }

  const handleStatusUpdate = async () => {
    if (selectedStatus && updateMessage.trim()) {
      await onUpdateStatus(dispute.id, selectedStatus, updateMessage);
      setUpdateMessage("");
      setSelectedStatus("");
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
    >
      <Card className="shadow-lg border-slate-200/60 bg-white/80 backdrop-blur-sm">
        <CardHeader className="border-b border-slate-100">
          <div className="flex items-center justify-between">
            <CardTitle className="text-xl font-bold text-slate-900">
              Dispute #{dispute.dispute_id}
            </CardTitle>
            <Badge className={`${
              dispute.priority === 'urgent' ? 'bg-red-100 text-red-700 border-red-200' :
              dispute.priority === 'high' ? 'bg-amber-100 text-amber-700 border-amber-200' :
              dispute.priority === 'medium' ? 'bg-blue-100 text-blue-700 border-blue-200' :
              'bg-slate-100 text-slate-700 border-slate-200'
            } border`}>
              {dispute.priority} priority
            </Badge>
          </div>
        </CardHeader>
        
        <CardContent className="p-6 space-y-6">
          {/* Customer Info */}
          <div className="space-y-4">
            <h3 className="font-semibold text-slate-900 flex items-center gap-2">
              <User className="w-4 h-4 text-blue-600" />
              Customer Information
            </h3>
            
            <div className="grid grid-cols-1 gap-3 pl-6">
              <div className="flex items-center gap-2">
                <span className="font-medium text-slate-700">{dispute.customer_name}</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-slate-600">
                <Mail className="w-4 h-4" />
                <span>{dispute.customer_email}</span>
              </div>
              {dispute.customer_phone && (
                <div className="flex items-center gap-2 text-sm text-slate-600">
                  <Phone className="w-4 h-4" />
                  <span>{dispute.customer_phone}</span>
                </div>
              )}
            </div>
          </div>

          {/* Dispute Info */}
          <div className="space-y-4">
            <h3 className="font-semibold text-slate-900 flex items-center gap-2">
              <FileText className="w-4 h-4 text-blue-600" />
              Dispute Details
            </h3>
            
            <div className="grid grid-cols-1 gap-3 pl-6">
              <div className="flex items-center justify-between">
                <span className="text-sm text-slate-600">Type:</span>
                <Badge variant="outline">{dispute.dispute_type.replace(/_/g, ' ')}</Badge>
              </div>
              
              <div className="flex items-center justify-between">
                <span className="text-sm text-slate-600">Status:</span>
                <Badge className={`${
                  dispute.status === 'resolved' || dispute.status === 'closed' ? 
                  'bg-emerald-100 text-emerald-700 border-emerald-200' :
                  'bg-amber-100 text-amber-700 border-amber-200'
                } border`}>
                  {dispute.status.replace(/_/g, ' ')}
                </Badge>
              </div>
              
              {dispute.amount && (
                <div className="flex items-center justify-between">
                  <span className="text-sm text-slate-600">Amount:</span>
                  <span className="font-semibold flex items-center gap-1">
                    <DollarSign className="w-4 h-4" />
                    {dispute.amount.toFixed(2)}
                  </span>
                </div>
              )}
              
              <div className="flex items-center justify-between">
                <span className="text-sm text-slate-600">Created:</span>
                <span className="text-sm flex items-center gap-1">
                  <Calendar className="w-4 h-4" />
                  {format(new Date(dispute.created_date), 'MMM d, yyyy HH:mm')}
                </span>
              </div>
            </div>
          </div>

          {/* Description */}
          <div className="space-y-2">
            <h3 className="font-semibold text-slate-900">Description</h3>
            <div className="p-3 bg-slate-50 rounded-lg border">
              <p className="text-sm text-slate-700">{dispute.description}</p>
            </div>
          </div>

          {/* Last Update */}
          {dispute.last_update && (
            <div className="space-y-2">
              <h3 className="font-semibold text-slate-900 flex items-center gap-2">
                <Clock className="w-4 h-4 text-blue-600" />
                Latest Update
              </h3>
              <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                <p className="text-sm text-blue-800">{dispute.last_update}</p>
              </div>
            </div>
          )}

          {/* Update Status */}
          <div className="space-y-4 border-t pt-6">
            <h3 className="font-semibold text-slate-900">Update Dispute</h3>
            
            <div className="space-y-3">
              <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                <SelectTrigger>
                  <SelectValue placeholder="Select new status" />
                </SelectTrigger>
                <SelectContent>
                  {statusOptions.map(status => (
                    <SelectItem key={status} value={status}>
                      {status.replace(/_/g, ' ')}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Textarea
                placeholder="Add update message for customer..."
                value={updateMessage}
                onChange={(e) => setUpdateMessage(e.target.value)}
                rows={3}
              />
              
              <Button
                onClick={handleStatusUpdate}
                disabled={!selectedStatus || !updateMessage.trim()}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
              >
                <Send className="w-4 h-4 mr-2" />
                Update Dispute
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
