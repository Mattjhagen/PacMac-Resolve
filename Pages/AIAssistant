import React, { useState, useEffect, useRef } from 'react';
import { InvokeLLM } from '@/integrations/Core';
import { ConversationLog } from '@/entities/ConversationLog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Send, Bot, User, Loader2 } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { motion, AnimatePresence } from 'framer-motion';

const Message = ({ role, content }) => {
  const isUser = role === 'user';
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex items-end gap-3 my-4 ${isUser ? 'justify-end' : 'justify-start'}`}
    >
      {!isUser && (
        <div className="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center flex-shrink-0">
          <Bot className="w-5 h-5 text-white" />
        </div>
      )}
      <div
        className={`max-w-md lg:max-w-2xl p-4 rounded-2xl ${
          isUser ? 'bg-blue-600 text-white rounded-br-none' : 'bg-white text-slate-800 border border-slate-200 rounded-bl-none'
        }`}
      >
        <ReactMarkdown className="prose prose-sm max-w-none">{content}</ReactMarkdown>
      </div>
      {isUser && (
         <div className="w-8 h-8 rounded-full bg-slate-200 flex items-center justify-center flex-shrink-0">
          <User className="w-5 h-5 text-slate-600" />
        </div>
      )}
    </motion.div>
  );
};

const generateSessionId = () => {
  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

export default function AIAssistantPage() {
  const [messages, setMessages] = useState([
    { role: 'assistant', content: 'Hello! I am the PacMac AI Assistant. How can I help you today? I have knowledge of everything on pacmacmobile.com.' }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId, setSessionId] = useState('');
  const chatEndRef = useRef(null);

  useEffect(() => {
    setSessionId(generateSessionId());
  }, []);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage = { role: 'user', content: inputValue };
    const currentInput = inputValue;
    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      const prompt = `
        You are a friendly and helpful customer service assistant for PacMac Mobile.
        Your knowledge base is the website pacmacmobile.com.
        Answer the user's question based on the information found on that website.
        If you cannot find an answer, apologize and ask if they would like to create a support dispute.
        Keep your answers concise and clear.

        Here is the current conversation history:
        ${messages.map(m => `${m.role}: ${m.content}`).join('\n')}

        Here is the user's new question:
        user: ${currentInput}
      `;
      
      const response = await InvokeLLM({
        prompt: prompt,
        add_context_from_internet: true,
      });

      const aiResponse = typeof response === 'object' ? response.output : response;
      const assistantMessage = { role: 'assistant', content: aiResponse };
      setMessages(prev => [...prev, assistantMessage]);
      
      // Log the conversation
      await ConversationLog.create({
        session_id: sessionId,
        user_query: currentInput,
        ai_response: aiResponse,
      });

    } catch (error) {
      console.error("Error invoking LLM:", error);
      const errorMessage = { role: 'assistant', content: 'Sorry, I encountered an error. Please try again.' };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="h-full flex flex-col p-6 bg-gradient-to-br from-slate-50 via-blue-50 to-slate-100">
        <div className="text-center mb-6">
            <h1 className="text-3xl font-bold text-slate-900">PacMac AI Assistant</h1>
            <p className="text-slate-600">Your personal guide to PacMac Mobile services.</p>
        </div>
        <Card className="flex-1 flex flex-col shadow-xl border-slate-200/60 bg-white/60 backdrop-blur-sm">
            <CardContent className="flex-1 p-4 md:p-6 overflow-y-auto">
            <AnimatePresence>
                {messages.map((msg, index) => (
                    <Message key={index} role={msg.role} content={msg.content} />
                ))}
            </AnimatePresence>
            {isLoading && (
                <div className="flex items-end gap-3 my-4 justify-start">
                    <div className="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center flex-shrink-0">
                        <Bot className="w-5 h-5 text-white" />
                    </div>
                    <div className="p-4 rounded-2xl bg-white border border-slate-200 rounded-bl-none">
                        <Loader2 className="w-5 h-5 animate-spin text-slate-500" />
                    </div>
                </div>
            )}
            <div ref={chatEndRef} />
            </CardContent>
            <div className="p-4 border-t border-slate-200/60">
            <div className="flex items-center gap-3">
                <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Ask about products, plans, or support..."
                className="flex-1 py-3 h-auto"
                disabled={isLoading}
                />
                <Button
                onClick={handleSendMessage}
                disabled={isLoading || !inputValue.trim()}
                className="bg-gradient-to-r from-blue-600 to-blue-700 shadow-lg shadow-blue-200 transition-all duration-300"
                >
                <Send className="w-4 h-4" />
                </Button>
            </div>
            </div>
        </Card>
    </div>
  );
}
